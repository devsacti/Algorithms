a = [(10,0,100), (9,1,90), (8,2,80), (7,3,70), (6,4,60), (5,5,50),(5,4,40),(5,4,30),(5,4,60)]

# 인자 없이 sorted()를 사용하면 리스트 아이템의 각 요소의 인덱스 순서대로, 그리고 '오름차순'
b = sorted(a)
print(b) 
#[(5, 4, 30), (5, 4, 40), (5, 4, 60), (5, 5, 50), (6, 4, 60), (7, 3, 70), (8, 2, 80), (9, 1, 90), (10, 0, 100)]

# key인자에 lambda 함수를 넘겨주면 반환값을 가지고 비교해 정렬
# 이 때, key로 전달되지 않은 요소에 대해선 정렬하지 않음
c = sorted(a, key=lambda x : x[0])
print(c)
# [(5, 5, 50), (5, 4, 40), (5, 4, 30), (5, 4, 60), (6, 4, 60), (7, 3, 70), (8, 2, 80), (9, 1, 90), (10, 0, 100)]

d = sorted(a, key=lambda x : x[1])
print(d) 
# [(10, 0, 100), (9, 1, 90), (8, 2, 80), (7, 3, 70), (6, 4, 60), (5, 4, 40), (5, 4, 30), (5, 4, 60), (5, 5, 50)]

# 정렬 기준으로 다중 조건을 넘겨줄 수도 있다
# 첫 번째 인자를 기준으로 오름차순 정렬을 먼저 한다.
# 그 결과를 가지고 두 번째 인자를 기준으로 내림차순 정렬(-를 붙이면 내림차순 정렬)

# persons : list of person, person consists of '3 element (?,?,?)'
e = sorted(a, key = lambda person : (person[0], -person[1],person[2]))
print(e)
# [(5, 5, 50), (5, 4, 30), (5, 4, 40), (5, 4, 60), (6, 4, 60), (7, 3, 70), (8, 2, 80), (9, 1, 90), (10, 0, 100)]

# person의 2번째 요소를 더 높은 정렬 기준으로 올렸더니 순서가 바뀜
e2 = sorted(a, key = lambda person : (person[0],person[2], -person[1]))
print(e2)
# [(5, 4, 30), (5, 4, 40), (5, 5, 50), (5, 4, 60), (6, 4, 60), (7, 3, 70), (8, 2, 80), (9, 1, 90), (10, 0, 100)]
