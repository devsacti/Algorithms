# 요약
## 선별적 브루트 포스와 문자열 비교
## 시간복잡도 : O(n^(3/2))

# 문제풀이 1~3단계 ; 정확한 해석 >> 알고리즘 활용 및 통합 >> 구현
## 1단계 : 정확한 문제 해석
## n 은 1 이상 1000 이하, 홀짝 모두 포함
## 짜르는 단위는 n
## 문자열은 소문자만

## !! 패턴의 길이보단 되도록이면 작은 단위이되, 그 반복이 많을 수록 효과적 !!
## 가령 (인식을 위해 띄어씀) ab ab ab ab ab ab 에서
## 패턴 길이를 크게 잡으면 최적값에 어느정도 도달하지만 ; 3ababab
## 패턴의 길이를 작게 잡을 때 6ab일때 가장 짧다.(1은 제외)

## 2-1 단계 : 해석에 알고리즘을 활용
## 현재로써는 짜르는 단위_unit_과 패턴의 길이 사이에 정확한 비례성이 판단안됨 >> 모든 unit 체크
## 단, 1~n 모든 unit이 문자열을 나누는 기준이 될 수 없다
 
## !! 왜냐하면 우리가 반복되는 '같은 unit'을 판단함은
## 수학적으로 볼 때, '동일한' 것이고, 컴퓨터 변수상 그것은 자료형과 길이로 정의할 수 있기 때문이다
# 그러므로 1~n 중 n의 약수만 탐색한 뒤 문자열을 비교한다.

## 문자열의 같다는 파이썬 기본기능을 활용 ex 'abc'=='abc'

## 2-2 단계 : 통합 및 시간복잡도 계산

## part 1 
## 선별 브루트포스와 문자열 같다 비교
## unit을 1~n 모두 다 살피지 않고, 현재 문자열 길이상, 약수로서 단위화가능한 unit만 선별
## 로직상 O(n^(1/2))
## 문자열 비교란 길이가 k로 동일한 문자열이 있을 시, 0~k-1인덱스로 각 자릿수를 판정하는과정이므로
## O(n)

## O(n^(1/2)) x O(n) >> O(n^(3/2))