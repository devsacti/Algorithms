1. 상수라고 생각했던 matrix가 변수였다


while(startToken)

startToken을 기본값을 주고 '나중에' 독립변수로 끄는것
아니면 처음부터 독립변수로 설정하는것.

인과적 관점에서는 치즈조각이 있기때문에 트루이다
가 철저히 후자인데,
코드 구현상에서는 전자가 더 편하다.

논리적으론, 초기값 도출과
시뮬레이션 실행을 위한 복사를 구분해서 

초기값 도출을 시뮬레이션상에서 또 반복하는 것이 논리적으론 명확하나,

코딩프로그램은 후자가 더 적합


2. 동시에 발생해야하는 사건들을
디브 안에 묶어라, 과정 중 갱신으로 인한 오류를 피하기위해
가령, 당장 현재 노드가 외부노출이라 지웠는데, 이를 바로 갱신하면
그 옆 치즈노드도 연달아 삭제될수 있다. 마치 그것이 처음 타임인것철머

그 그 디브안에서는 갱신이 없어야한다.

3
치즈를 빼낼수도 있고, 외부에서 bfs를 하는것도 되지 않나 했는데
치즈가 없는 공간이 어딘지 모르지 않나했는데,

그래서 문제에 치즈가 없는 공간을 준거였음. 0,0에는 언제나 치즈가 없고 외부와 연결
이를 활용하면 치즈 전체가 아니라 '외부와 접촉된' 치즈좌표들만 모을 수 있다.

한편으론 checkIN 모듈은 필요가 없었다. 하지만 시간복잡도를 줄이는 데 효과적일 것으로 보인다.
그만큼 또 처리는 복잡해지지만

from collections import deque
import sys
input=sys.stdin.readline
# findHole
# delete cheeze except hole
# repeat

# plus to optimize
# Think based on cheeze

global dr,dc
dr=[-1,1,0,0]
dc=[0,0,-1,1]

# bfs per node,only have 0, and not visited by bfsgate
def checkIN(matrix,v,visited):
  q=deque()
  r,c = v
  visited[r][c]=1
  q.append(v)
  
  relatedNodes=[]
  InToken=True
  
  while(q):
    now=q.popleft()
    # print('cur',now,end=' ')
    relatedNodes.append(now)
    nowR,nowC=now
    
    adjs=[]
    #make adjs
    for i in range(4):
      adjR=nowR+dr[i]
      adjC=nowC+dc[i]
      
      if(adjR>(n-1) or adjR<0 or adjC>(n-1) or adjC<0):
        InToken=False
        continue
      
      if(matrix[adjR][adjC]==1):
        continue
      
      adjs.append((adjR,adjC))
    # print('adjs',adjs)
    
    if(len(adjs)>0):
      for adj in adjs:
        if(visited[adj[0]][adj[1]]==0):
          visited[adj[0]][adj[1]]=1
          q.append(adj)
      
  if(InToken):
    return relatedNodes
  else:
    return []

if __name__=="__main__":
  m,n=map(int,input().split())
  matrix=[list(map(int,input().split())) for _ in range(m)]

  
  # print(*matrix,sep='\n')
  
  # div0 simulation by while ; repeat (find cheeze, find inside)
  startToken=True
  records=[]
  while(startToken):
    # use matrix as init, by the way init the visited
    visited=[[0]*n for _ in range(m)]

    cheeze=[]
    insides=[]
    
    for r in range(m):
      for c in range(n):
        if(matrix[r][c]==1):
          cheeze.append((r,c))
        
        #bfs gate
        if(matrix[r][c]==0 and visited[r][c]==0):
          insides.extend(checkIN(matrix,(r,c),visited))
    
    lengthCheeze=len(cheeze)
    if(lengthCheeze==0):
      records.append(0)
      break
    
    # print(cheeze)
    # print(insides)
    visitedpiece=[0]*lengthCheeze
    willbeMelted=[]
    # same moment1 ; exposed no update!
    for i in range(lengthCheeze):
      piece=cheeze[i]
      nowR,nowC=piece
      #check adjs
      for i in range(4):
        adjR=nowR+dr[i]
        adjC=nowC+dc[i]
        
        if(matrix[adjR][adjC]==0 and (adjR,adjC) not in insides):
          willbeMelted.append(piece)
          
    print('--')
    print(willbeMelted)
    
    break
    
    
    # div1>

4. 한편, 이를 통해 외부노출을 1 인덱스 좌표계를 통해 해결가능

5. 
std/controlled, experiment